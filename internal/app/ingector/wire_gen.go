// Copyright (C) 2022 Check Point Software Technologies Ltd. All rights reserved.

// Licensed under the Apache License, Version 2.0 (the "License");
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package ingector

import (
	"context"
	"openappsec.io/smartsync-service/internal/app"
	"openappsec.io/smartsync-service/internal/app/drivers/eventconsumer"
	"openappsec.io/smartsync-service/internal/app/drivers/http/rest"
	"openappsec.io/smartsync-service/internal/app/learning"
	"openappsec.io/smartsync-service/internal/pkg/db/s3"
	"openappsec.io/smartsync-service/internal/pkg/lock/flock"
	redis2 "openappsec.io/smartsync-service/internal/pkg/lock/redis"
	"openappsec.io/configuration"
	"openappsec.io/configuration/viper"
	"openappsec.io/health"
	"openappsec.io/kafka/consumermanager"
	"openappsec.io/redis"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context) (*app.App, error) {
	adapter := viper.NewViper()
	service, err := configuration.NewConfigurationService(adapter)
	if err != nil {
		return nil, err
	}
	healthService := health.NewService()
	s3repositoryAdapter, err := s3repository.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	redisAdapter := redis.NewClient()
	adapter2, err := redis2.NewAdapter(ctx, redisAdapter, service)
	if err != nil {
		return nil, err
	}
	learnCore, err := learning.NewLearnService(s3repositoryAdapter, adapter2)
	if err != nil {
		return nil, err
	}
	restAdapter, err := rest.NewAdapter(service, healthService, learnCore)
	if err != nil {
		return nil, err
	}
	consumerManager := consumermanager.NewConsumerManager()
	eventconsumerAdapter, err := eventconsumer.NewAdapter(consumerManager, learnCore, service)
	if err != nil {
		return nil, err
	}
	appApp := app.NewApp(restAdapter, service, healthService, eventconsumerAdapter, adapter2)
	return appApp, nil
}

func InitializeStandAloneApp(ctx context.Context) (*app.App, error) {
	adapter := viper.NewViper()
	service, err := configuration.NewConfigurationService(adapter)
	if err != nil {
		return nil, err
	}
	healthService := health.NewService()
	s3repositoryAdapter, err := s3repository.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	flockAdapter, err := flock.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	learnCore, err := learning.NewLearnService(s3repositoryAdapter, flockAdapter)
	if err != nil {
		return nil, err
	}
	restAdapter, err := rest.NewAdapter(service, healthService, learnCore)
	if err != nil {
		return nil, err
	}
	appApp := app.NewStandAloneApp(restAdapter, service, healthService, flockAdapter)
	return appApp, nil
}
